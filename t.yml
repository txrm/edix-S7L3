AWSTemplateFormatVersion: '2010-09-09'

Resources:
  Buckeroo:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRule
            Status: Enabled
            ExpirationInDays: 1

  CleanUp:
    Type: AWS::Lambda::Function
    DependsOn: Buckeroo
    Properties:
      Handler: index.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();

          exports.handler = async (event, context) => {
              const bucketName = process.env.BUCKET_NAME;

              if (bucketName) {
                  try {
                      const { Contents } = await s3.listObjects({ Bucket: bucketName }).promise();
                      if (Contents.length > 0) {
                          await s3.deleteObjects({
                              Bucket: bucketName,
                              Delete: { Objects: Contents.map(({ Key }) => ({ Key })) }
                          }).promise();
                      }
                      await s3.deleteBucket({ Bucket: bucketName }).promise();
                      return {
                          statusCode: 200
                      };
                  } catch (error) {
                      return {
                          statusCode: 500,
                          body: `Error deleting S3 bucket ${bucketName}: ${error.message}`
                      };
                  }
              } else {
                  return {
                      statusCode: 400,
                      body: 'Bucket name not provided.'
                  };
              }
          };
      Runtime: nodejs16.x
      Timeout: 60
      Environment:
        Variables:
          BUCKET_NAME: !Ref Buckeroo

Outputs:
  BuckerooName:
    Value: !Ref Buckeroo
  LambdaName:
    Value: !Ref CleanUp
